package org.zerock.myapp;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;

import lombok.extern.log4j.Log4j2;

@Log4j2
public class OIOSocketServer {

	//소켓(Socket객체) 통해, 주고받는 메시지에 대한 규격도 설계해야 하는데,
	//이를 바이트 기반으로 설계하는게 아니라, 객체기반으로 설계한다면
	//매우 단순해질수가 있다. 
	//이를 위해서, 우리가 배웠던 자바 입/출력 보조스트림 중에
	//객체의 직렬화/역직렬화에서 소개되었었던
	//ObjectInput/OutputStream 을 이용하면 객체를 네트워크로 주고 받을 수 있다.
	//이번 예제는 이것이 핵심
	public static void main(String[] args) throws IOException {
		
		log.trace("main({})", Arrays.toString(args));
		
		//ServerSocket 생성 및 accept 수행
		int listenPort = 7777;
		int backlog = 100; //default size: 50
		
//		ServerSocket serverSocket = new ServerSocket(listenPort, backlog);
		ServerSocket serverSocket = new ServerSocket();
		serverSocket.bind(new InetSocketAddress("0.0.0.0", listenPort), backlog);//socketaddress >ip와 port 가지고 있음
//		----------------------------------------------
		
		try(serverSocket){
			Socket sock = serverSocket.accept();
			sock.getRemoteSocketAddress(); //연결된 클라이언트의 주소/포트 정보 획득
			
			
		}//try-with-resources 단독 사용 가능, @Cleanup 과 유사한 기능
		
	}//main

}//end class
